安装nvm-window@1.1.7
Vue-cli 3 的使用
环境要求： node 版本使用8.15.0
nvm install 8.15.0
nvm use 8.15.0
npm config set registry https://registry.npm.taobao.org
安装：
npm install -g @vue/cli@3.3.0
创建一个项目：
vue create my-project

单独运行一个Vue文件的要求：
npm install -g @vue/cli-service-global

快速原型开发：
创建一个App.vue
运行 vue serve -o

Vue.js基础
el 属性：
指定Vue实例在页面上的挂载位置。
它的值可以是：字符串，一个CSS选择器（如#app）; 或者是HTMLElement实例。（如var element = document.getElementById('app');）
如果没有提供 template属性和render属性，则作为挂载点的HTML将被作为渲染页面DOM的模板。
用于渲染生成页面的DOM不是挂载点的HTML创建的DOM，而是由Vue系统创建生成的DOM，所以数据属性才得以渲染到页面上。

template 属性：
字符串，
必须要有且仅有一个根元素，
Vue使用template属性值的字符串生成DOM并将它渲染到页面上。
它将替换Vue实例挂载点的所有HTML元素。
（如<script id="myTemplate" type="x-template">），注意作为模板使用的元素应放在声明app之前。
也可以使用<template>元素替换<script>元素，注意浏览器是否兼容。

render 属性：
render 函数也可以创建模板来生成Vue DOM。
优先级高于template属性和HTML模板。
更多的内容后面再讲。

data 属性：
创建Vue实例时，它会将数据对象的所有属性添加到响应式系统。
Vue响应式系统监听数据各个属性的变化来更新视图。
Vue应用启动后不能添加新的数据项到响应式系统中，也不会被监听。
可以预先定义好数据属性，赋值为空字符串‘ ’， null 或者 undefined。
不要使用空对象 { }， 因为它会被序列化为字符串，类似于JSON.stringify()。
数据对象的属性名称不得以$或_开头。
任何以$或_开头的属性都不会添加到Vue的响应式系统，因为它们可能会导致与Vue的内部属性和方法冲突。
由于它们不会被添加到响应式系统中，因此也无法在模板中访问它们。
如果确实包含以$或_开头的属性，可以使用Vue实例的 $data 属性访问。
可以使用 app.$data.propertyName访问原始数据对象
也可以使用 this.$data.propertyName 访问。

methods 属性：
使用methods属性可以增强应用的编程特色，JavaScript的编程逻辑得以发扬光大。
避免使用箭头函数，() => {}, 因为它会阻止我们访问正确的上下文，如this的作用域发生变化。
要正确使用methods【过程、逻辑】和computed属性【结果、可缓存】。
如果你要渲染的数据需要经过计算，则配置computed属性更合适。

computed 属性：
与methods属性类似，区别在于computed属性会缓存计算结果，仅当改变时才更新。

模板语法：
"Mustache" 语法（双大括号） 如{{propertyName}}
双大括号适用于文本信息的绑定，不能绑定到HTML元素的属性。
绑定HTML元素的属性可以使用，v-bind指令。通过属性名作为参数来绑定属性值。
v-html指令,应用它的元素内容将被替换为绑定的值，且值被视为HTML。
注意：在应用中，仅使用v-html绑定自己信任的HTML，不要直接渲染用户提供的HTML，防止XSS（跨站）攻击。
总结：搞清楚{{}}、v-bind、v-html等等指令的使用场景。

条件渲染：
Vue提供了两个条件渲染的指令：v-if和v-show。
	•使用v-show，我们可以使用CSS的display属性来隐藏和显示内容。
​	•使用v-if，将从DOM中删除内容。它可以与v-else和v-else-if指令一起使用。
​	从性能角度来看，v-show具有更高的初始渲染成本，因为即使显示它的条件为假，
它也会渲染生成DOM。如果值为false，v-if则不会渲染。
当值发生变化时，v-show确实具有较少的渲染成本，
因为它已经在DOM中，并且CSS显示属性是唯一的变化。
另外，当渲染它的条件从false变为true时，v-if则必须将从新渲染并添加到DOM。
	当您尝试决定使用v-if或v-show时，请考虑您的使用场景。
	如果页面元素的渲染状态要经常更改，请使用v-show。
	如果仅在第一次渲染后偶尔或从不更改，则最好使用v-if。
v-show 指令：
使用v-show 类似于使用HTML元素属性。
和HTML元素的区别在于：
它的值可以是来自Vue实例或者计算结果为true或者false的表达式。
在表达式中使用字符串，请在周围使用单引号（''）。

总结：
v-show, 带有v-show的元素始终会被渲染并保留在DOM中，
v-show 只是简单地切换元素CSS的display属性。
注意，v-show 不支持<template>元素，也不支持v-else.

v-if 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的时间监听器和子组件适当地被销毁和重建。
v-if 也是惰性的： 如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。
一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。
因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。

v-else 指令
当v-if计算为false时， 检查使用v-else进行条件渲染。

v-else-if 指令
多条件选择。

使用v-if指令进行分组组
可以将元素组合在一起，以便可以使用一个操作（一个判断条件）显示或者隐藏分组，而不是每次都使用v-if。

列表渲染：
v-for 指令，用于显示字符串数组。

v-for指令中使用 :key
Vue使用 :key 属性来标识并跟踪已经渲染的元素，这样可以正确快速的更新DOM。

v-for指令使用 item in items 形式的特殊语法。
items 是源数据数组并且 item 是数组元素迭代的别名。
也可以使用of 来替代 in作为分隔符。
注意，在 v-for 指令中，拥有对父级作用域的完全访问权限。

数组更新检测：
Vue 包含一组观察数组变异的方法， 它们会触发视图更新。
push(), pop(), shift(), unshift(), splice(), sort(), reverse(); 可以放心使用。
共同点，也即关键： 改变了原始数组。

不会触发视图更新：
由于javascript的限制，Vue不能检测出数组的以下两种情形的变动。
1、 当你直接使用索引来设置一个数组项的值时， 例如：vm.items[indexOfitem] = newValue;
2、 当你改变数组长度时， 例如：vm.items.length = newLength;
不能改变原始数组的方法如：filter()， concat(), slice(); 要想让Vue观察到这些变化，可以想办法替换原始数组即可。

在对象上使用v-for指令
注意：由于javascript引擎的行为不同，因此，无法保证不同的浏览器中属性的顺序。
在对象上使用v-for指令和在数组上的区别在于： 它可以接收三个参数：value, key, index.
value和index的使用两者一致。
key代表属性的名称。

计算属性和侦听器：
使用template、methods、computed三种方式渲染数据产生一样的结果。
但是在页面重绘的时候会有所不同；
重绘【重新渲染】会引起所绑定的methods里的方法每次都运行。

使用watch属性可以监听数据变化，
对于复杂对象，可以使用watch的deep属性。
要立即调用监听处理程序，可以使用immediate:true,这样可以保证监听处理程序至少被调用一次。
