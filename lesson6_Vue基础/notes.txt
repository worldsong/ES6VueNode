安装nvm-window@1.1.7
Vue-cli 3 的使用
环境要求： node 版本使用8.15.0
nvm install 8.15.0
nvm use 8.15.0
npm config set registry https://registry.npm.taobao.org
安装：
npm install -g @vue/cli@3.3.0
创建一个项目：
vue create my-project

单独运行一个Vue文件的要求：
npm install -g @vue/cli-service-global

快速原型开发：
创建一个App.vue
运行 vue serve -o

Vue.js基础
el 属性：
指定Vue实例在页面上的挂载位置。
它的值可以是：字符串，一个CSS选择器（如#app）; 或者是HTMLElement实例。（如var element = document.getElementById('app');）
如果没有提供 template属性和render属性，则作为挂载点的HTML将被作为渲染页面DOM的模板。
用于渲染生成页面的DOM不是挂载点的HTML创建的DOM，而是由Vue系统创建生成的DOM，所以数据属性才得以渲染到页面上。

template 属性：
字符串，
必须要有且仅有一个根元素，
Vue使用template属性值的字符串生成DOM并将它渲染到页面上。
它将替换Vue实例挂载点的所有HTML元素。
（如<script id="myTemplate" type="x-template">），注意作为模板使用的元素应放在声明app之前。
也可以使用<template>元素替换<script>元素，注意浏览器是否兼容。

render 属性：
render 函数也可以创建模板来生成Vue DOM。
优先级高于template属性和HTML模板。
更多的内容后面再讲。

data 属性：
创建Vue实例时，它会将数据对象的所有属性添加到响应式系统。
Vue响应式系统监听数据各个属性的变化来更新视图。
Vue应用启动后不能添加新的数据项到响应式系统中，也不会被监听。
可以预先定义好数据属性，赋值为空字符串‘ ’， null 或者 undefined。
不要使用空对象 { }， 因为它会被序列化为字符串，类似于JSON.stringify()。
数据对象的属性名称不得以$或_开头。
任何以$或_开头的属性都不会添加到Vue的响应式系统，因为它们可能会导致与Vue的内部属性和方法冲突。
由于它们不会被添加到响应式系统中，因此也无法在模板中访问它们。
如果确实包含以$或_开头的属性，可以使用Vue实例的 $data 属性访问。
可以使用 app.$data.propertyName访问原始数据对象
也可以使用 this.$data.propertyName 访问。

methods 属性：
使用methods属性可以增强应用的编程特色，JavaScript的编程逻辑得以发扬光大。
避免使用箭头函数，() => {}, 因为它会阻止我们访问正确的上下文，如this的作用域发生变化。
要正确使用methods【过程、逻辑】和computed属性【结果、可缓存】。
如果你要渲染的数据需要经过计算，则配置computed属性更合适。



